# Variable that defines the input graph file name. 
#
# The graph is represented as an adjacency list. Therefore each line has the format: 
#	source_word relation_type target_word.
#	where:
#	- source_word and target_word are single or multiword expressions (the later without spaces. See the example below.) 
#	  These words represents nodes in the graph. 
#	- relation_type, is the relation between those words.
#	  These relations represents edges in the graph. 
#	  This implementation recognizes two types of relations: Synonymous and Antonymous.
#		» Synonymous can be expressed by the strings SYN, SINONIMO_N_DE, SINONIMO_V_DE, SINONIMO_ADJ_DE, SINONIMO_ADV_DE.
#		» Antonymous can be expressed by the string ANT.
# 
# EXAMPLE 1 (relations without POS tagging information):
# 	good SYN valid 
#	good SYN well-founded
#	good ANT bad
#	bad ANT acceptable
#	acceptable SYN all_right
#
# EXAMPLE 2 (relations with POS tagging information. Useful for using with PAPEL a Portuguese lexical resource):
# 	casamento SINONIMO_N_DE aliança
# 	patife SINONIMO_N_DE canalha
# 	permissão SINONIMO_N_DE consentimento
#
# Any absolute path should be given with forward slashes (example: E:/Development/Graph-Java/relations.txt).
fileAdjacencyList = examples/example01-tiny-graph-english.txt 
#fileAdjacencyList = example2_input_relacoes_final_SINONIMIA.txt 

# Variable that defines the input file of seed words (words manually classified).
# A word by line, in the format of: word, polarity
#
# Example:
# good, 1	
# bad, -1
# normal, 0
# 
# The polarity of these words will propagated for all other unlabeled words in the Graph.
# Any absolute path should be give with forward slashes (example: E:/Development/Graph-Java/seed_words.txt).
seedWordsFile = examples/example01-seed-words-english.txt
#seedWordsFile = example2_input_seed_words.txt

# Variable that defines the output file. The list of polarity words.
#
# Example:
# Word;POS;Polarity;#+;#-;#0;#iteration
# good;unk;+;1;0;0;0;
# commonsense;unk;+;1;0;0;1; 
# commonsensible;unk;+;1;0;0;1;
# illegitimate;unk;-;0;2;0;2;
#
# Columns meaning:
# - Word;POS
#	Word followed by its part of speech tag. The part-of-speech is extracted from the relation name when available.
#	If the POS information is not available the string unk (unknown is output).
# -	Polarity
#	The word polarity, which can be: (+) positive, (-) negative, (0) neutral, (A) ambiguous.
# - #+, #-, #0
# 	These columns are the number of positive, negative, and neutral polarities received from neighbour words, during the polarity propagation.
#	If #+ > #- AND #+ > #0, the word is positive (+).
#	If #- > #+ AND #- > #0, the word is negative (-).
#   If #0 > #+ AND #0 > #-, the word is neutral (0)
#	Otherwise the polarity is ambiguous (A). 
# - #iteration
# 	This column represents the algorithm iteration and at same time the shortest distance (number of edges in the graph) 
#	between the word and the closest seed word (word manually classified).
#	For example: 
#	The word "good" is on #iteration 0, meaning that it is a word manually classified. Meaning also that the shortest 
#	distance to the closest seed word is 0 (this happends because the word itself is a seed words).
#	The word "illegitimate" is on #iteration 2, meaning that the shortest distance to the closest seed word is 2.   
#
# Any absolute path should be give with forward slashes (example: E:/Development/Graph-Java/polarityLexicon.txt)
outputFile = examples/example01-list-of-polarities-OUTPUT-english.csv
#outputFile = example2_output_listOfpolarities.csv

# After running the polarity propagation algorithm some words may not have a polarity. This happends if the 
# graph is disconnected. 
# Output words without polarity ?
# true - will output only words with a polarity
# false - will output words all words
outputWordsWithPolarity = false

# directedGraph = true 
# directedGraph = false (create an undirected graph) 
directedGraph = false

# This variable should be always "true" unless there is a good reason to set it as "false".
# true - prevent the algorithm from propagate the polarity from a word back to its neighbour.
# false - allows the algorithm to propagate the polarity back from a word back to its direct neighbour.  
avoidRicochet = true

# Print extra information (debug information) ?
verbose = false
